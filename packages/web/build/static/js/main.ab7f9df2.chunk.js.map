{"version":3,"sources":["components/SignIn/SignIn.tsx","components/SignUp/SignUp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["validationSchema","Yup","shape","email","required","password","min","SignIn","history","useHistory","useForm","mode","reValidateMode","resolver","yupResolver","register","formState","errors","isSubmitting","isValid","as","onSubmit","console","log","direction","spacing","p","w","h","maxW","margin","alignItems","justifyContent","fontSize","textAlign","lineHeight","isInvalid","htmlFor","id","type","placeholder","aria-label","message","width","isLoading","isDisabled","onClick","push","App","exact","path","component","SignUp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab7f9df2.chunk.js","sourcesContent":["import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\nimport {\n  Stack,\n  Input,\n  Button,\n  Link,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Heading,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface SignInFormProps {\n  email: string;\n  password: string;\n}\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n  password: Yup.string()\n    .required(\"Password is required\")\n    .min(8, \"Password should be 8 chars minimum\"),\n});\n\nconst SignIn = () => {\n  const history = useHistory();\n\n  const {\n    register,\n    formState: { errors, isSubmitting, isValid },\n  } = useForm<SignInFormProps>({\n    mode: \"onChange\",\n    reValidateMode: \"onChange\",\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit = () => {\n    console.log(\"submitted!\");\n  };\n\n  return (\n    <Stack\n      as=\"form\"\n      onSubmit={onSubmit}\n      direction=\"column\"\n      spacing=\"20px\"\n      p=\"20px\"\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"500px\"\n      margin=\"0 auto\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Stack direction=\"column\" spacing=\"10px\">\n        <Heading as=\"h1\" fontSize=\"36px\" textAlign=\"center\">\n          Playground\n        </Heading>\n\n        <Text fontSize=\"16px\" lineHeight=\"30px\" textAlign=\"center\">\n          Sign in to your account\n        </Text>\n      </Stack>\n\n      <FormControl isInvalid={errors.email && true}>\n        <FormLabel htmlFor=\"email\">Email</FormLabel>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          aria-label=\"email\"\n          {...register(\"email\")}\n        />\n        <FormErrorMessage>\n          {errors.email && errors.email.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl isInvalid={errors.password && true}>\n        <FormLabel htmlFor=\"password\">Password</FormLabel>\n        <Input\n          id=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          aria-label=\"password\"\n          {...register(\"password\")}\n        />\n        <FormErrorMessage>\n          {errors.password && errors.password.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <Button\n        type=\"submit\"\n        width=\"100%\"\n        isLoading={isSubmitting}\n        isDisabled={!isValid}\n      >\n        Sign in\n      </Button>\n\n      <Stack direction=\"row\" spacing=\"3px\">\n        <Text>Don't have an account?</Text>\n        <Link onClick={() => history.push(\"/sign-up\")}>Get started now</Link>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default SignIn;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\nimport {\n  Stack,\n  Input,\n  Button,\n  Link,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Heading,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface SignInFormProps {\n  email: string;\n  password: string;\n}\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n  password: Yup.string()\n    .required(\"Password is required\")\n    .min(8, \"Password should be 8 chars minimum\"),\n});\n\nconst SignIn = () => {\n  const history = useHistory();\n\n  const {\n    register,\n    formState: { errors, isSubmitting, isValid },\n  } = useForm<SignInFormProps>({\n    mode: \"onChange\",\n    reValidateMode: \"onChange\",\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit = () => {\n    console.log(\"submitted!\");\n  };\n\n  return (\n    <Stack\n      as=\"form\"\n      onSubmit={onSubmit}\n      direction=\"column\"\n      spacing=\"20px\"\n      p=\"20px\"\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"500px\"\n      margin=\"0 auto\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Stack direction=\"column\" spacing=\"10px\">\n        <Heading as=\"h1\" fontSize=\"36px\" textAlign=\"center\">\n          Playground\n        </Heading>\n\n        <Text fontSize=\"16px\" lineHeight=\"30px\" textAlign=\"center\">\n          Create an account\n        </Text>\n      </Stack>\n\n      <FormControl isInvalid={errors.email && true}>\n        <FormLabel htmlFor=\"email\">Email</FormLabel>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          aria-label=\"email\"\n          {...register(\"email\")}\n        />\n        <FormErrorMessage>\n          {errors.email && errors.email.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl isInvalid={errors.password && true}>\n        <FormLabel htmlFor=\"password\">Password</FormLabel>\n        <Input\n          id=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          aria-label=\"password\"\n          {...register(\"password\")}\n        />\n        <FormErrorMessage>\n          {errors.password && errors.password.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <Button\n        type=\"submit\"\n        width=\"100%\"\n        isLoading={isSubmitting}\n        isDisabled={!isValid}\n      >\n        Sign up\n      </Button>\n\n      <Stack direction=\"row\" spacing=\"3px\">\n        <Text>Already have an account?</Text>\n        <Link onClick={() => history.push(\"/sign-in\")}>Log in</Link>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default SignIn;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport SignIn from \"src/components/SignIn/SignIn\";\nimport SignUp from \"src/components/SignUp/SignUp\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={SignIn} />\n        <Route exact path=\"/sign-in\" component={SignIn} />\n        <Route exact path=\"/sign-up\" component={SignUp} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}